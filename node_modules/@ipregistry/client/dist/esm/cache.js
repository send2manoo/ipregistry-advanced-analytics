"use strict";
/*
 * Copyright 2019 Ipregistry (https://ipregistry.co).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.NoCache = exports.InMemoryCache = void 0;
var LRUCache = require("lru-cache");
var InMemoryCache = /** @class */ (function () {
    function InMemoryCache(maximumSize, expireAfter) {
        if (maximumSize === void 0) { maximumSize = typeof window !== 'undefined' ? 16 : 2048; }
        if (expireAfter === void 0) { expireAfter = 600 * 1000; }
        this.maximumSize = maximumSize;
        this.expireAfter = expireAfter;
        var options = {
            max: maximumSize,
            ttl: expireAfter,
        };
        this.cache = new LRUCache(options);
    }
    InMemoryCache.prototype.get = function (key) {
        return this.cache.get(key);
    };
    InMemoryCache.prototype.invalidate = function (key) {
        this.cache.delete(key);
    };
    InMemoryCache.prototype.invalidateAll = function () {
        this.cache.clear();
    };
    InMemoryCache.prototype.put = function (key, data) {
        this.cache.set(key, data);
    };
    return InMemoryCache;
}());
exports.InMemoryCache = InMemoryCache;
var NoCache = /** @class */ (function () {
    function NoCache() {
    }
    NoCache.prototype.get = function (key) {
        return undefined;
    };
    NoCache.prototype.invalidate = function (key) {
        // do nothing
    };
    NoCache.prototype.invalidateAll = function () {
        // do nothing
    };
    NoCache.prototype.put = function (key, data) {
        // do nothing
    };
    return NoCache;
}());
exports.NoCache = NoCache;
//# sourceMappingURL=cache.js.map