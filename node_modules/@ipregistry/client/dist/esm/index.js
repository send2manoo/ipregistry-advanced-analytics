"use strict";
/*
 * Copyright 2019 Ipregistry (https://ipregistry.co).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserAgent = exports.IpregistryClient = exports.IpregistryConfigBuilder = exports.IpregistryConfig = void 0;
var request_1 = require("./request");
var cache_1 = require("./cache");
var errors_1 = require("./errors");
var IpregistryConfig = /** @class */ (function () {
    function IpregistryConfig(apiKey, baseUrl, timeout) {
        this.baseUrl = 'https://api.ipregistry.co';
        this.timeout = 15000;
        this.apiKey = apiKey;
        if (baseUrl) {
            this.baseUrl = baseUrl;
        }
        if (timeout) {
            this.timeout = timeout;
        }
    }
    return IpregistryConfig;
}());
exports.IpregistryConfig = IpregistryConfig;
var IpregistryConfigBuilder = /** @class */ (function () {
    function IpregistryConfigBuilder(apiKey) {
        this.baseUrl = 'https://api.ipregistry.co';
        this.timeout = 15000;
        this.apiKey = apiKey;
    }
    /*
     * Use the new {@link IpregistryConfigBuilder.withBaseUrl} method instead.
     */
    IpregistryConfigBuilder.prototype.withApiUrl = function (apiUrl) {
        this.baseUrl = apiUrl;
        return this;
    };
    IpregistryConfigBuilder.prototype.withBaseUrl = function (baseUrl) {
        this.baseUrl = baseUrl;
        return this;
    };
    IpregistryConfigBuilder.prototype.withTimeout = function (timeout) {
        this.timeout = timeout;
        return this;
    };
    IpregistryConfigBuilder.prototype.build = function () {
        return new IpregistryConfig(this.apiKey, this.baseUrl, this.timeout);
    };
    return IpregistryConfigBuilder;
}());
exports.IpregistryConfigBuilder = IpregistryConfigBuilder;
var IpregistryClient = /** @class */ (function () {
    function IpregistryClient(keyOrConfig, cache, requestHandler) {
        if (typeof keyOrConfig === 'string') {
            this.config = new IpregistryConfigBuilder(keyOrConfig).build();
        }
        else if (!keyOrConfig) {
            this.config = new IpregistryConfigBuilder('tryout').build();
        }
        else {
            this.config = keyOrConfig;
        }
        if (cache) {
            this.cache = cache;
        }
        else {
            this.cache = new cache_1.NoCache();
        }
        if (requestHandler) {
            this.requestHandler = requestHandler;
        }
        else {
            this.requestHandler = new request_1.DefaultRequestHandler(this.config);
        }
    }
    IpregistryClient.prototype.batchLookup = function (ips) {
        var options = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            options[_i - 1] = arguments[_i];
        }
        return __awaiter(this, void 0, void 0, function () {
            var sparseCache, cacheMisses, i, ip, cacheKey, cacheValue, result, apiResponse, freshIpInfo, j, k, _a, sparseCache_1, cachedIpInfo, lookupError, ipInfo;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        sparseCache = new Array(ips.length);
                        cacheMisses = [];
                        for (i = 0; i < ips.length; i++) {
                            ip = ips[i];
                            cacheKey = IpregistryClient.buildCacheKey(ip, options);
                            cacheValue = this.cache.get(cacheKey);
                            if (cacheValue) {
                                sparseCache[i] = cacheValue;
                            }
                            else {
                                cacheMisses.push(ip);
                            }
                        }
                        result = new Array(ips.length);
                        if (!(cacheMisses.length > 0)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.requestHandler.batchLookup(cacheMisses, options)];
                    case 1:
                        apiResponse = _b.sent();
                        freshIpInfo = apiResponse.data;
                        return [3 /*break*/, 3];
                    case 2:
                        apiResponse = null;
                        freshIpInfo = [];
                        _b.label = 3;
                    case 3:
                        j = 0;
                        k = 0;
                        for (_a = 0, sparseCache_1 = sparseCache; _a < sparseCache_1.length; _a++) {
                            cachedIpInfo = sparseCache_1[_a];
                            if (!cachedIpInfo) {
                                if ((0, errors_1.isApiError)(freshIpInfo[k])) {
                                    lookupError = freshIpInfo[k];
                                    result[j] = new errors_1.LookupError(lookupError['code'], lookupError['message'], lookupError['resolution']);
                                }
                                else {
                                    ipInfo = freshIpInfo[k];
                                    this.cache.put(IpregistryClient.buildCacheKey(ipInfo.ip, options), ipInfo);
                                    result[j] = freshIpInfo[k];
                                }
                                k++;
                            }
                            else {
                                result[j] = cachedIpInfo;
                            }
                            j++;
                        }
                        return [2 /*return*/, {
                                credits: apiResponse ? apiResponse.credits : {
                                    consumed: 0,
                                    remaining: null
                                },
                                data: result,
                                throttling: apiResponse ? apiResponse.throttling : null
                            }];
                }
            });
        });
    };
    IpregistryClient.prototype.lookup = function (ip) {
        var options = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            options[_i - 1] = arguments[_i];
        }
        return __awaiter(this, void 0, void 0, function () {
            var cacheKey, cacheValue, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        cacheKey = IpregistryClient.buildCacheKey(ip, options);
                        cacheValue = this.cache.get(cacheKey);
                        if (!!cacheValue) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.requestHandler.lookup(ip, options)];
                    case 1:
                        result = _a.sent();
                        this.cache.put(cacheKey, result.data);
                        return [3 /*break*/, 3];
                    case 2:
                        result = {
                            credits: {
                                consumed: 0,
                                remaining: null
                            },
                            data: cacheValue,
                            throttling: null
                        };
                        _a.label = 3;
                    case 3: return [2 /*return*/, result];
                }
            });
        });
    };
    IpregistryClient.prototype.originLookup = function () {
        var options = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            options[_i] = arguments[_i];
        }
        return __awaiter(this, void 0, void 0, function () {
            var cacheKey, cacheValue, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        cacheKey = IpregistryClient.buildCacheKey('', options);
                        cacheValue = this.cache.get(cacheKey);
                        if (!!cacheValue) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.requestHandler.originLookup(options)];
                    case 1:
                        result = _a.sent();
                        this.cache.put(cacheKey, result.data);
                        return [3 /*break*/, 3];
                    case 2:
                        result = {
                            credits: {
                                consumed: 0,
                                remaining: null
                            },
                            data: cacheValue,
                            throttling: null
                        };
                        _a.label = 3;
                    case 3: return [2 /*return*/, result];
                }
            });
        });
    };
    IpregistryClient.prototype.parse = function () {
        var userAgents = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            userAgents[_i] = arguments[_i];
        }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.requestHandler.parse(userAgents)];
            });
        });
    };
    IpregistryClient.prototype.getCache = function () {
        return this.cache;
    };
    IpregistryClient.buildCacheKey = function (ip, options) {
        var result = ip ? ip : '';
        if (options) {
            for (var _i = 0, options_1 = options; _i < options_1.length; _i++) {
                var option = options_1[_i];
                result += ";".concat(option.name, "=").concat(option.value);
            }
        }
        return result;
    };
    return IpregistryClient;
}());
exports.IpregistryClient = IpregistryClient;
__exportStar(require("./cache"), exports);
__exportStar(require("./errors"), exports);
__exportStar(require("./model"), exports);
__exportStar(require("./options"), exports);
__exportStar(require("./request"), exports);
var util_1 = require("./util");
Object.defineProperty(exports, "UserAgent", { enumerable: true, get: function () { return util_1.UserAgent; } });
//# sourceMappingURL=index.js.map