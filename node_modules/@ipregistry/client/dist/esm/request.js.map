{"version":3,"file":"request.js","sourceRoot":"","sources":["../../src/request.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2019 Ipregistry (https://ipregistry.co).\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport axios, {AxiosResponse} from 'axios';\nimport {ApiError, ClientError} from './errors';\nimport {IpregistryConfig} from './index';\nimport {IpInfo, RequesterIpInfo, UserAgent} from './model';\nimport {IpregistryOption} from './options';\n\n\nexport interface ApiResponse<T> {\n\n    credits: ApiResponseCredits;\n\n    data: T;\n\n    throttling: ApiResponseThrottling | null;\n\n}\n\nexport interface ApiResponseCredits {\n\n    /**\n     * The number of credits consumed to produce this response.\n     */\n    consumed: number | null;\n\n    /**\n     * The estimated number of credits remaining on the account associated with\n     * the API key that was used to make the request.\n     */\n    remaining: number | null;\n\n}\n\nexport interface ApiResponseThrottling {\n\n    /**\n     * Indicates how many requests is allowed per hour (time window).\n     */\n    limit: number | null;\n\n    /**\n     * Indicates how many requests are remaining for the current window.\n     */\n    remaining: number | null;\n\n    /**\n     * Indicates when the current window ends, in seconds from the current time.\n     */\n    reset: number | null;\n\n}\n\nexport interface IpregistryRequestHandler {\n\n    batchLookup(ipAddresses: string[], options: IpregistryOption[]): Promise<ApiResponse<IpInfo[]>>;\n\n    lookup(ipAddress: string, options: IpregistryOption[]): Promise<ApiResponse<IpInfo>>;\n\n    originLookup(options: IpregistryOption[]): Promise<ApiResponse<RequesterIpInfo>>;\n\n    parse(userAgents: string[]): Promise<ApiResponse<UserAgent[]>>;\n\n}\n\nexport class DefaultRequestHandler implements IpregistryRequestHandler {\n\n    private static USER_AGENT: string = 'Ipregistry/JavaScript/3.0.0';\n\n    private config: IpregistryConfig;\n\n    constructor(config: IpregistryConfig) {\n        this.config = config;\n    }\n\n    async batchLookup(ips: string[], options: IpregistryOption[]): Promise<ApiResponse<IpInfo[]>> {\n        try {\n            const response =\n                await axios.post(\n                    this.buildApiUrl('', options),\n                    JSON.stringify(ips),\n                    this.getAxiosConfig()\n                );\n\n            return {\n                credits: {\n                    consumed: this.getConsumedCredits(response),\n                    remaining: this.getRemainingCredits(response)\n                },\n                data: response.data.results,\n                throttling: this.getThrottlingData(response)\n            };\n        } catch (error: any) {\n            if (error.isAxiosError && error.response) {\n                const data = error.response.data;\n                throw new ApiError(data.code, data.message, data.resolution);\n            }\n\n            throw new ClientError(error.message);\n        }\n    }\n\n    async lookup(ip: string, options: IpregistryOption[]): Promise<ApiResponse<IpInfo>> {\n        try {\n            const response =\n                await axios.get(\n                    this.buildApiUrl(ip, options),\n                    this.getAxiosConfig()\n                );\n\n            return {\n                credits: {\n                    consumed: this.getConsumedCredits(response),\n                    remaining: this.getRemainingCredits(response)\n                },\n                data: response.data as IpInfo,\n                throttling: this.getThrottlingData(response)\n            };\n        } catch (error: any) {\n            if (error.isAxiosError && error.response) {\n                const data = error.response.data;\n                throw new ApiError(data.code, data.message, data.resolution);\n            }\n\n            throw new ClientError(error.message);\n        }\n    }\n\n    async originLookup(options: IpregistryOption[]): Promise<ApiResponse<RequesterIpInfo>> {\n        try {\n            const response =\n                await axios.get(\n                    this.buildApiUrl('', options),\n                    this.getAxiosConfig()\n                );\n\n            return {\n                credits: {\n                    consumed: this.getConsumedCredits(response),\n                    remaining: this.getRemainingCredits(response)\n                },\n                data: response.data as RequesterIpInfo,\n                throttling: this.getThrottlingData(response)\n            };\n        } catch (error: any) {\n            if (error.isAxiosError && error.response) {\n                const data = error.response.data;\n                throw new ApiError(data.code, data.message, data.resolution);\n            }\n\n            throw new ClientError(error.message);\n        }\n    }\n\n    async parse(userAgents: string[]): Promise<ApiResponse<UserAgent[]>> {\n        try {\n            const response =\n                await axios.post(\n                    this.buildApiUrl('user_agent'),\n                    userAgents,\n                    this.getAxiosConfig()\n                );\n\n            return {\n                credits: {\n                    consumed: this.getConsumedCredits(response),\n                    remaining: this.getRemainingCredits(response)\n                },\n                data: response.data.results,\n                throttling: this.getThrottlingData(response)\n            };\n        } catch (error: any) {\n            if (error.isAxiosError && error.response) {\n                const data = error.response.data;\n                throw new ApiError(data.code, data.message, data.resolution);\n            }\n\n            throw new ClientError(error.message);\n        }\n    }\n\n    protected getAxiosConfig() {\n        const headers = {\n            'authorization': `ApiKey ${this.config.apiKey}`,\n            'content-type': 'application/json',\n        };\n\n        try {\n            if (window === undefined) {\n                headers['user-agent'] = DefaultRequestHandler.USER_AGENT;\n            }\n        } catch (error) {\n            // ignore\n        }\n\n        return {\n            headers: headers,\n            timeout: this.config.timeout\n        };\n    }\n\n    protected getConsumedCredits(response: AxiosResponse): number | null {\n        return DefaultRequestHandler.parseInt(response.headers['ipregistry-credits-consumed']);\n    }\n\n    protected getRemainingCredits(response: AxiosResponse): number | null {\n        return DefaultRequestHandler.parseInt(response.headers['ipregistry-credits-remaining']);\n    }\n\n    protected getThrottlingData(response: AxiosResponse): ApiResponseThrottling | null {\n        const ratelimit = response.headers['x-rate-limit-limit'];\n\n        if (!ratelimit) {\n            return null;\n        }\n\n        return {\n            limit: DefaultRequestHandler.parseInt(ratelimit),\n            remaining: DefaultRequestHandler.parseInt(response.headers['x-rate-limit-remaining']),\n            reset: DefaultRequestHandler.parseInt(response.headers['x-rate-limit-reset'])\n        }\n    }\n\n    protected static parseInt(value: string): number | null {\n        const result = parseInt(value);\n\n        if (isNaN(result)) {\n            return null;\n        }\n\n        return result;\n    }\n\n    protected buildApiUrl(path: string, options?: IpregistryOption[]) {\n        let result = `${this.config.baseUrl}/${path ? path : ''}`;\n\n        if (options) {\n            let prefix = '?';\n\n            for (const option of options) {\n                result += `${prefix}${option.name}=${encodeURIComponent(option.value)}`;\n                prefix = '&';\n            }\n        }\n\n        return result;\n    }\n\n}\n"]}