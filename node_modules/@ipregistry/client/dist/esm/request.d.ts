import { AxiosResponse } from 'axios';
import { IpregistryConfig } from './index';
import { IpInfo, RequesterIpInfo, UserAgent } from './model';
import { IpregistryOption } from './options';
export interface ApiResponse<T> {
    credits: ApiResponseCredits;
    data: T;
    throttling: ApiResponseThrottling | null;
}
export interface ApiResponseCredits {
    /**
     * The number of credits consumed to produce this response.
     */
    consumed: number | null;
    /**
     * The estimated number of credits remaining on the account associated with
     * the API key that was used to make the request.
     */
    remaining: number | null;
}
export interface ApiResponseThrottling {
    /**
     * Indicates how many requests is allowed per hour (time window).
     */
    limit: number | null;
    /**
     * Indicates how many requests are remaining for the current window.
     */
    remaining: number | null;
    /**
     * Indicates when the current window ends, in seconds from the current time.
     */
    reset: number | null;
}
export interface IpregistryRequestHandler {
    batchLookup(ipAddresses: string[], options: IpregistryOption[]): Promise<ApiResponse<IpInfo[]>>;
    lookup(ipAddress: string, options: IpregistryOption[]): Promise<ApiResponse<IpInfo>>;
    originLookup(options: IpregistryOption[]): Promise<ApiResponse<RequesterIpInfo>>;
    parse(userAgents: string[]): Promise<ApiResponse<UserAgent[]>>;
}
export declare class DefaultRequestHandler implements IpregistryRequestHandler {
    private static USER_AGENT;
    private config;
    constructor(config: IpregistryConfig);
    batchLookup(ips: string[], options: IpregistryOption[]): Promise<ApiResponse<IpInfo[]>>;
    lookup(ip: string, options: IpregistryOption[]): Promise<ApiResponse<IpInfo>>;
    originLookup(options: IpregistryOption[]): Promise<ApiResponse<RequesterIpInfo>>;
    parse(userAgents: string[]): Promise<ApiResponse<UserAgent[]>>;
    protected getAxiosConfig(): {
        headers: {
            authorization: string;
            'content-type': string;
        };
        timeout: number;
    };
    protected getConsumedCredits(response: AxiosResponse): number | null;
    protected getRemainingCredits(response: AxiosResponse): number | null;
    protected getThrottlingData(response: AxiosResponse): ApiResponseThrottling | null;
    protected static parseInt(value: string): number | null;
    protected buildApiUrl(path: string, options?: IpregistryOption[]): string;
}
//# sourceMappingURL=request.d.ts.map