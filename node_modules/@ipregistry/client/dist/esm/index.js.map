{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2019 Ipregistry (https://ipregistry.co).\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {ApiResponse, DefaultRequestHandler, IpregistryRequestHandler} from './request';\nimport {IpInfo, RequesterIpInfo, UserAgent} from './model';\nimport {IpregistryCache, NoCache} from './cache';\nimport {IpregistryOption} from './options';\n\nimport {isApiError, LookupError} from './errors';\n\n\nexport class IpregistryConfig {\n\n    public readonly apiKey: string;\n\n    public readonly baseUrl: string = 'https://api.ipregistry.co';\n\n    public readonly timeout: number = 15000;\n\n    constructor(apiKey: string, baseUrl: string, timeout: number) {\n        this.apiKey = apiKey;\n\n        if (baseUrl) {\n            this.baseUrl = baseUrl;\n        }\n\n        if (timeout) {\n            this.timeout = timeout;\n        }\n    }\n\n}\n\nexport class IpregistryConfigBuilder {\n\n    private apiKey: string;\n\n    private baseUrl: string = 'https://api.ipregistry.co';\n\n    private timeout: number = 15000;\n\n    constructor(apiKey: string) {\n        this.apiKey = apiKey;\n    }\n\n    /*\n     * Use the new {@link IpregistryConfigBuilder.withBaseUrl} method instead.\n     */\n    public withApiUrl(apiUrl: string): IpregistryConfigBuilder {\n        this.baseUrl = apiUrl;\n        return this;\n    }\n\n    public withBaseUrl(baseUrl: string): IpregistryConfigBuilder {\n        this.baseUrl = baseUrl;\n        return this;\n    }\n\n    public withTimeout(timeout: number): IpregistryConfigBuilder {\n        this.timeout = timeout;\n        return this;\n    }\n\n    public build(): IpregistryConfig {\n        return new IpregistryConfig(this.apiKey, this.baseUrl, this.timeout);\n    }\n\n}\n\nexport class IpregistryClient {\n\n    private config: IpregistryConfig;\n\n    private cache: IpregistryCache;\n\n    private requestHandler: IpregistryRequestHandler;\n\n    constructor(\n        keyOrConfig: string | IpregistryConfig,\n        cache?: IpregistryCache,\n        requestHandler?: IpregistryRequestHandler) {\n\n        if (typeof keyOrConfig === 'string') {\n            this.config = new IpregistryConfigBuilder(keyOrConfig).build();\n        } else if (!keyOrConfig) {\n            this.config = new IpregistryConfigBuilder('tryout').build();\n        } else {\n            this.config = keyOrConfig;\n        }\n\n        if (cache) {\n            this.cache = cache;\n        } else {\n            this.cache = new NoCache();\n        }\n\n        if (requestHandler) {\n            this.requestHandler = requestHandler;\n        } else {\n            this.requestHandler = new DefaultRequestHandler(this.config);\n        }\n    }\n\n    async batchLookup(ips: string[], ...options: IpregistryOption[]): Promise<ApiResponse<(IpInfo | LookupError)[]>> {\n        const sparseCache: Array<(IpInfo | null)> = new Array<IpInfo | null>(ips.length);\n        const cacheMisses: Array<string> = [];\n\n        for (let i = 0; i < ips.length; i++) {\n            const ip = ips[i];\n            const cacheKey = IpregistryClient.buildCacheKey(ip, options);\n            const cacheValue = this.cache.get(cacheKey);\n\n            if (cacheValue) {\n                sparseCache[i] = cacheValue;\n            } else {\n                cacheMisses.push(ip);\n            }\n        }\n\n        const result: Array<(IpInfo | LookupError)> = new Array<IpInfo | LookupError>(ips.length);\n\n        let apiResponse;\n        let freshIpInfo;\n\n        if (cacheMisses.length > 0) {\n            apiResponse = await this.requestHandler.batchLookup(cacheMisses, options);\n            freshIpInfo = apiResponse.data;\n        } else {\n            apiResponse = null;\n            freshIpInfo = [];\n        }\n\n        let j = 0;\n        let k = 0;\n\n        for (const cachedIpInfo of sparseCache) {\n            if (!cachedIpInfo) {\n                if (isApiError(freshIpInfo[k])) {\n                    const lookupError = freshIpInfo[k];\n                    result[j] = new LookupError(lookupError['code'], lookupError['message'], lookupError['resolution']);\n                } else {\n                    const ipInfo = freshIpInfo[k];\n                    this.cache.put(IpregistryClient.buildCacheKey(ipInfo.ip, options), ipInfo);\n                    result[j] = freshIpInfo[k];\n                }\n\n                k++;\n            } else {\n                result[j] = cachedIpInfo;\n            }\n\n            j++;\n        }\n\n        return {\n            credits: apiResponse ? apiResponse.credits : {\n                consumed: 0,\n                remaining: null\n            },\n            data: result,\n            throttling: apiResponse ? apiResponse.throttling : null\n        };\n    }\n\n    async lookup(ip: string, ...options: IpregistryOption[]): Promise<ApiResponse<IpInfo>> {\n        const cacheKey = IpregistryClient.buildCacheKey(ip, options);\n        const cacheValue = this.cache.get(cacheKey) as IpInfo;\n\n        let result: ApiResponse<IpInfo>;\n\n        if (!cacheValue) {\n            result = await this.requestHandler.lookup(ip, options);\n            this.cache.put(cacheKey, result.data);\n        } else {\n            result = {\n                credits: {\n                    consumed: 0,\n                    remaining: null\n                },\n                data: cacheValue,\n                throttling: null\n            }\n        }\n\n        return result;\n    }\n\n    async originLookup(...options: IpregistryOption[]): Promise<ApiResponse<RequesterIpInfo>> {\n        const cacheKey = IpregistryClient.buildCacheKey('', options);\n        const cacheValue = this.cache.get(cacheKey) as RequesterIpInfo;\n\n        let result: ApiResponse<RequesterIpInfo>;\n\n        if (!cacheValue) {\n            result = await this.requestHandler.originLookup(options);\n            this.cache.put(cacheKey, result.data);\n        } else {\n            result = {\n                credits: {\n                    consumed: 0,\n                    remaining: null\n                },\n                data: cacheValue,\n                throttling: null\n            }\n        }\n\n        return result;\n    }\n\n    async parse(...userAgents: string[]): Promise<ApiResponse<UserAgent[]>> {\n        return this.requestHandler.parse(userAgents);\n    }\n\n    public getCache(): IpregistryCache {\n        return this.cache;\n    }\n\n    private static buildCacheKey(ip: string, options: IpregistryOption[]): string {\n        let result = ip ? ip : '';\n\n        if (options) {\n            for (const option of options) {\n                result += `;${option.name}=${option.value}`;\n            }\n        }\n\n        return result;\n    }\n\n}\n\nexport * from './cache';\nexport * from './errors';\nexport * from './model';\nexport * from './options';\nexport * from './request';\n\nexport {UserAgent} from './util';\n"]}