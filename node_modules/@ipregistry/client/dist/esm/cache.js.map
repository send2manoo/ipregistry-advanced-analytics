{"version":3,"file":"cache.js","sourceRoot":"","sources":["../../src/cache.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAIH,oCAAsC;AAetC;IAQI,uBAAY,WAA+D,EAAE,WAAgC;QAAjG,4BAAA,EAAA,cAAsB,OAAO,MAAM,KAAK,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI;QAAE,4BAAA,EAAA,cAAsB,GAAG,GAAG,IAAI;QACzG,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAE/B,IAAM,OAAO,GAAS;YAClB,GAAG,EAAE,WAAW;YAChB,GAAG,EAAE,WAAW;SACnB,CAAC;QAEF,IAAI,CAAC,KAAK,GAAG,IAAI,QAAQ,CAAC,OAAO,CAAC,CAAC;IACvC,CAAC;IAED,2BAAG,GAAH,UAAI,GAAW;QACX,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAC/B,CAAC;IAED,kCAAU,GAAV,UAAW,GAAW;QAClB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;IAC3B,CAAC;IAED,qCAAa,GAAb;QACI,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;IACvB,CAAC;IAED,2BAAG,GAAH,UAAI,GAAW,EAAE,IAAY;QACzB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;IAC9B,CAAC;IAEL,oBAAC;AAAD,CAAC,AApCD,IAoCC;AApCY,sCAAa;AAsC1B;IAAA;IAkBA,CAAC;IAhBG,qBAAG,GAAH,UAAI,GAAW;QACX,OAAO,SAAS,CAAC;IACrB,CAAC;IAED,4BAAU,GAAV,UAAW,GAAW;QAClB,aAAa;IACjB,CAAC;IAED,+BAAa,GAAb;QACI,aAAa;IACjB,CAAC;IAED,qBAAG,GAAH,UAAI,GAAW,EAAE,IAAY;QACzB,aAAa;IACjB,CAAC;IAEL,cAAC;AAAD,CAAC,AAlBD,IAkBC;AAlBY,0BAAO","sourcesContent":["/*\n * Copyright 2019 Ipregistry (https://ipregistry.co).\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {IpInfo} from './model';\n\nimport * as LRUCache from 'lru-cache';\n\n\nexport interface IpregistryCache {\n\n    get(key: string): any | undefined;\n\n    put(key: string, data: any): void;\n\n    invalidate(key: string): void;\n\n    invalidateAll(): void;\n\n}\n\nexport class InMemoryCache implements IpregistryCache {\n\n    private readonly maximumSize;\n\n    private readonly expireAfter;\n\n    private readonly cache: LRUCache<string, IpInfo>;\n\n    constructor(maximumSize: number = typeof window !== 'undefined' ? 16 : 2048, expireAfter: number = 600 * 1000) {\n        this.maximumSize = maximumSize;\n        this.expireAfter = expireAfter;\n\n        const options : any = {\n            max: maximumSize,\n            ttl: expireAfter,\n        };\n\n        this.cache = new LRUCache(options);\n    }\n\n    get(key: string): IpInfo | undefined {\n        return this.cache.get(key);\n    }\n\n    invalidate(key: string): void {\n        this.cache.delete(key);\n    }\n\n    invalidateAll(): void {\n        this.cache.clear();\n    }\n\n    put(key: string, data: IpInfo): void {\n        this.cache.set(key, data);\n    }\n\n}\n\nexport class NoCache implements IpregistryCache {\n\n    get(key: string): IpInfo | undefined {\n        return undefined;\n    }\n\n    invalidate(key: string): void {\n        // do nothing\n    }\n\n    invalidateAll(): void {\n        // do nothing\n    }\n\n    put(key: string, data: IpInfo): void {\n        // do nothing\n    }\n\n}\n"]}