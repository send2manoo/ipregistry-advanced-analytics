import { ApiResponse, IpregistryRequestHandler } from './request';
import { IpInfo, RequesterIpInfo, UserAgent } from './model';
import { IpregistryCache } from './cache';
import { IpregistryOption } from './options';
import { LookupError } from './errors';
export declare class IpregistryConfig {
    readonly apiKey: string;
    readonly baseUrl: string;
    readonly timeout: number;
    constructor(apiKey: string, baseUrl: string, timeout: number);
}
export declare class IpregistryConfigBuilder {
    private apiKey;
    private baseUrl;
    private timeout;
    constructor(apiKey: string);
    withApiUrl(apiUrl: string): IpregistryConfigBuilder;
    withBaseUrl(baseUrl: string): IpregistryConfigBuilder;
    withTimeout(timeout: number): IpregistryConfigBuilder;
    build(): IpregistryConfig;
}
export declare class IpregistryClient {
    private config;
    private cache;
    private requestHandler;
    constructor(keyOrConfig: string | IpregistryConfig, cache?: IpregistryCache, requestHandler?: IpregistryRequestHandler);
    batchLookup(ips: string[], ...options: IpregistryOption[]): Promise<ApiResponse<(IpInfo | LookupError)[]>>;
    lookup(ip: string, ...options: IpregistryOption[]): Promise<ApiResponse<IpInfo>>;
    originLookup(...options: IpregistryOption[]): Promise<ApiResponse<RequesterIpInfo>>;
    parse(...userAgents: string[]): Promise<ApiResponse<UserAgent[]>>;
    getCache(): IpregistryCache;
    private static buildCacheKey;
}
export * from './cache';
export * from './errors';
export * from './model';
export * from './options';
export * from './request';
export { UserAgent } from './util';
//# sourceMappingURL=index.d.ts.map