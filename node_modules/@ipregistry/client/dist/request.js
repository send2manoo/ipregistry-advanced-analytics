"use strict";
/*
 * Copyright 2019 Ipregistry (https://ipregistry.co).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultRequestHandler = void 0;
var axios_1 = require("axios");
var errors_1 = require("./errors");
var DefaultRequestHandler = /** @class */ (function () {
    function DefaultRequestHandler(config) {
        this.config = config;
    }
    DefaultRequestHandler.prototype.batchLookup = function (ips, options) {
        return __awaiter(this, void 0, void 0, function () {
            var response, error_1, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, axios_1.default.post(this.buildApiUrl('', options), JSON.stringify(ips), this.getAxiosConfig())];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, {
                                credits: {
                                    consumed: this.getConsumedCredits(response),
                                    remaining: this.getRemainingCredits(response)
                                },
                                data: response.data.results,
                                throttling: this.getThrottlingData(response)
                            }];
                    case 2:
                        error_1 = _a.sent();
                        if (error_1.isAxiosError && error_1.response) {
                            data = error_1.response.data;
                            throw new errors_1.ApiError(data.code, data.message, data.resolution);
                        }
                        throw new errors_1.ClientError(error_1.message);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    DefaultRequestHandler.prototype.lookup = function (ip, options) {
        return __awaiter(this, void 0, void 0, function () {
            var response, error_2, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, axios_1.default.get(this.buildApiUrl(ip, options), this.getAxiosConfig())];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, {
                                credits: {
                                    consumed: this.getConsumedCredits(response),
                                    remaining: this.getRemainingCredits(response)
                                },
                                data: response.data,
                                throttling: this.getThrottlingData(response)
                            }];
                    case 2:
                        error_2 = _a.sent();
                        if (error_2.isAxiosError && error_2.response) {
                            data = error_2.response.data;
                            throw new errors_1.ApiError(data.code, data.message, data.resolution);
                        }
                        throw new errors_1.ClientError(error_2.message);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    DefaultRequestHandler.prototype.originLookup = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var response, error_3, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, axios_1.default.get(this.buildApiUrl('', options), this.getAxiosConfig())];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, {
                                credits: {
                                    consumed: this.getConsumedCredits(response),
                                    remaining: this.getRemainingCredits(response)
                                },
                                data: response.data,
                                throttling: this.getThrottlingData(response)
                            }];
                    case 2:
                        error_3 = _a.sent();
                        if (error_3.isAxiosError && error_3.response) {
                            data = error_3.response.data;
                            throw new errors_1.ApiError(data.code, data.message, data.resolution);
                        }
                        throw new errors_1.ClientError(error_3.message);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    DefaultRequestHandler.prototype.parse = function (userAgents) {
        return __awaiter(this, void 0, void 0, function () {
            var response, error_4, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, axios_1.default.post(this.buildApiUrl('user_agent'), userAgents, this.getAxiosConfig())];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, {
                                credits: {
                                    consumed: this.getConsumedCredits(response),
                                    remaining: this.getRemainingCredits(response)
                                },
                                data: response.data.results,
                                throttling: this.getThrottlingData(response)
                            }];
                    case 2:
                        error_4 = _a.sent();
                        if (error_4.isAxiosError && error_4.response) {
                            data = error_4.response.data;
                            throw new errors_1.ApiError(data.code, data.message, data.resolution);
                        }
                        throw new errors_1.ClientError(error_4.message);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    DefaultRequestHandler.prototype.getAxiosConfig = function () {
        var headers = {
            'authorization': "ApiKey ".concat(this.config.apiKey),
            'content-type': 'application/json',
        };
        try {
            if (window === undefined) {
                headers['user-agent'] = DefaultRequestHandler.USER_AGENT;
            }
        }
        catch (error) {
            // ignore
        }
        return {
            headers: headers,
            timeout: this.config.timeout
        };
    };
    DefaultRequestHandler.prototype.getConsumedCredits = function (response) {
        return DefaultRequestHandler.parseInt(response.headers['ipregistry-credits-consumed']);
    };
    DefaultRequestHandler.prototype.getRemainingCredits = function (response) {
        return DefaultRequestHandler.parseInt(response.headers['ipregistry-credits-remaining']);
    };
    DefaultRequestHandler.prototype.getThrottlingData = function (response) {
        var ratelimit = response.headers['x-rate-limit-limit'];
        if (!ratelimit) {
            return null;
        }
        return {
            limit: DefaultRequestHandler.parseInt(ratelimit),
            remaining: DefaultRequestHandler.parseInt(response.headers['x-rate-limit-remaining']),
            reset: DefaultRequestHandler.parseInt(response.headers['x-rate-limit-reset'])
        };
    };
    DefaultRequestHandler.parseInt = function (value) {
        var result = parseInt(value);
        if (isNaN(result)) {
            return null;
        }
        return result;
    };
    DefaultRequestHandler.prototype.buildApiUrl = function (path, options) {
        var result = "".concat(this.config.baseUrl, "/").concat(path ? path : '');
        if (options) {
            var prefix = '?';
            for (var _i = 0, options_1 = options; _i < options_1.length; _i++) {
                var option = options_1[_i];
                result += "".concat(prefix).concat(option.name, "=").concat(encodeURIComponent(option.value));
                prefix = '&';
            }
        }
        return result;
    };
    DefaultRequestHandler.USER_AGENT = 'Ipregistry/JavaScript/3.0.0';
    return DefaultRequestHandler;
}());
exports.DefaultRequestHandler = DefaultRequestHandler;
//# sourceMappingURL=request.js.map